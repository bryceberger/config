"$schema" = "https://jj-vcs.github.io/jj/prerelease/config-schema.json"

[ui]
default-command = "log"
diff-editor = ":builtin"
diff-formatter = "difft"
show-cryptographic-signatures = true
pager = ":builtin"

[user]
name = "@name@"
email = "@email@"

[signing]
backend = "gpg"
behavior = "own"

[core]
fsmonitor = "watchman"
watchman.register-snapshot-trigger = true

[git]
private-commits = "private()"
push-bookmark-prefix = "bryce/push-"
write-change-id-header = true

[merge-tools.difft]
diff-args = ["--color=always", "$left", "$right"]

[merge-tools.kitty]
diff-args = ["+kitten", "diff", "$left", "$right"]

[colors]
"node wip" = { fg = "yellow" }
"node private" = { fg = "yellow" }

"text link" = { fg = "blue" }
"text warning" = { bold = true, fg = "red" }

"tag" = "yellow"
"tags" = "yellow"

[aliases]
ds = ["diff", "--stat"]
dv = [
  "--config=templates.draft_commit_description=commit_description_verbose(self)",
  "describe",
]
dk = ["diff", "--tool", "kitty"]
ll = ["log", "-T", "builtin_log_detailed"]
l = ["log", "-T", "builtin_log_compact"]

tug = ["bookmark", "move", "--from", "streams()", "--to", "@-"]
streams = [
  "log",
  "--no-graph",
  "-r",
  "streams()",
  "-T",
  "bookmarks.map(|b| b ++ ' ')",
]

open = ["log", "-r", "open()"]
stack = ["log", "-r", "stack()"]
s = ["stack"]

manage = ["util", "exec", "--", "jj-manage"]
man = ["manage"]

rdiff = [
  "util",
  "exec",
  "--",
  "bash",
  "-c",
  '''
  #!/usr/bin/env bash
  set -eu -o pipefail

  target=$1

  # todo: configurable stream head
  bookmark_names=$(jj log --no-graph -r 'heads(::@ & bookmarks())' -T 'local_bookmarks.map(|l| l.name() ++ " ")')
  IFS=" " read -ra bookmarks <<<"$bookmark_names"
  # todo: error message
  [ ${#bookmarks[@]} -eq 1 ] || exit 1
  bookmark=${bookmarks[0]}

  all_refs=$(jj evolog --no-graph -T 'commit_id ++ "|"' -r "$target")
  # todo: configurable remote
  remote=$(jj log --no-graph -T 'commit_id' -n 1 -r "($all_refs none()) & ::$bookmark@origin")

  jj diff --from "$remote" --to "$target"
  ''',
  "",
]

[revset-aliases]
"mine()" = "author(exact:'@name@') | author(exact:'@email@')"

"wip()" = "description(glob:'wip:*')"
"private()" = "description(glob:'private:*')"

"stack()" = "ancestors(mutable() & (..@ | @::), 2)"
"stack(x)" = "ancestors(mutable() & (..x | x::), 2)"
"stack(x, n)" = "ancestors(mutable() & (..x | x::), n)"

"streams()" = "heads(::@ & bookmarks())"
"streams(x)" = "heads(::x & bookmarks())"
'base_point(x)' = "heads(immutable_heads() & ::x)"

"open()" = "stack(trunk().. & mine(), 2)"
"open(n)" = "stack(trunk().. & mine(), n)"

'why_immutable(r)' = '(r & immutable()) | roots(r:: & immutable_heads())'

[revsets]
log = '''none()
  | base_point(@)
  | ancestors(@, 10) & trunk()..@
  | trunk()
  | bookmarks()
  | mutable() & visible_heads()
  | fork_point(mutable() & visible_heads())
  | (mutable() & merges())-
'''
short-prefixes = "stack(@)"

[template-aliases]
"link(target, text)" = 'raw_escape_sequence("\x1b]8;;" ++ target ++ "\x1b\\") ++ label("text link", text) ++ raw_escape_sequence("\x1b]8;;\x1b\\")'
"italic(text)" = 'raw_escape_sequence("\x1b[3m") ++ text ++ raw_escape_sequence("\x1b[23m")'
"dim(text)" = 'raw_escape_sequence("\x1b[2m") ++ text ++ raw_escape_sequence("\x1b[22m")'

"commit_description_verbose(commit)" = '''
concat(
  commit_description(commit),
  "JJ: ignore-rest\n",
  diff.git(),
)
'''
"commit_description(commit)" = '''
concat(
  commit.description(), "\n",
  "JJ: This commit contains the following changes:\n",
  indent("JJ:    ", diff.stat(72)),
)
'''

annotate_header = '''
if(first_line_in_hunk, surround("\n", "\n", separate("\n",
  separate(" ",
    format_short_change_id_with_hidden_and_divergent_info(commit),
    format_short_id(commit.commit_id()),
    format_short_cryptographic_signature(commit.signature()),
    commit.description().first_line(),
  ),
  commit_timestamp(commit).local().format('%Y-%m-%d %H:%M:%S')
    ++ " "
    ++ commit.author(),
))) ++ pad_start(4, line_number) ++ ": " ++ content
'''

# 00000000 ........ yyyy-mm-dd HH:MM:SS    1:
annotate = '''
if(first_line_in_hunk,
  separate(" ",
    format_short_id(commit.change_id()),
    pad_end(8, truncate_end(8, commit.author().email().local())),
    commit_timestamp(commit).local().format('%Y-%m-%d %H:%M:%S'),
  ),
  pad_end(37, ""),
) ++ pad_start(4, line_number) ++ ": " ++ content
'''

"format_commit_info(commit)" = '''separate(" ",
  format_short_change_id_with_hidden_and_divergent_info(commit),
  format_short_id(commit.commit_id()),
  format_short_cryptographic_signature(commit.signature()),
)'''

"format_commit_bookmarks(commit)" = '''separate(" ",
  commit.working_copies(),
  commit.tags(),
  commit.bookmarks(),
)'''

"format_description(commit)" = '''separate(" ",
  if(empty, label("empty", "(empty)")),
  if(commit.description(),
    commit.description().first_line(),
    if(!empty, label("description placeholder", "(no description set)")),
  ),
)'''

default_log = '''separate(" ",
  format_commit_info(self),
  format_commit_bookmarks(self),
  format_description(self),
)'''

[templates]
draft_commit_description = "commit_description(self)"

file_annotate = "annotate_header"

log = "default_log"
log_node = '''
label("node", coalesce(
  if(!self, label("elided", "~")),
  label(
    separate(" ",
      if(current_working_copy, "working_copy"),
      if(conflict, "conflict"),
      if(immutable, "immutable"),
      if(description.starts_with("wip:"), "wip"),
      if(description.starts_with("private:"), "wip"),
    ),
    coalesce(
      if(current_working_copy, "@"),
      if(conflict, "x"),
      if(immutable, "◆"),
      if(description.starts_with("wip:"), "!"),
      if(description.starts_with("private:"), "◇"),
      "○",
    )
  )
))
'''
